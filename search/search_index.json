{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"factor_investing/","text":"Factor investing in commodities When using yfinance for commodity futures, we observe only the front-month futures prices , typically rolled automatically. This allows us to construct: Excess returns on fully collateralized long futures positions. Momentum from rolling 12-month returns. Average Commodity Factor as the equal-weighted return across contracts. However, we cannot construct basis-related factors: Basis requires both front- and second-nearby prices. Basis-Momentum needs the term structure slope over time. Thus, our pricing tests will focus on factors we can construct reliably with yfinance . Commodity Futures Yahoo Finance provides daily prices of nearest futures contracts, specifically what they call continuous front-month futures for commodities (e.h., CL=F for WTI Crude Oil). These are automatically rolled contracts and do not represent a specific maturity date. In this section, we will download and process commodity futures data using the yfinance library and convert it to a Polars DataFrame. We will then save the data in Parquet format for further analysis. import yfinance as yf import polars as pl # Define commodity futures tickers tickers = { # Energy \"WTI Crude Oil\": \"CL=F\", \"Brent Crude Oil\": \"BZ=F\", \"Gasoline RBOB\": \"RB=F\", \"Heating Oil\": \"HO=F\", \"Natural Gas\": \"NG=F\", \"Propane\": \"PG=F\", # approximate or rarely available # Gasoil is not available directly on Yahoo Finance # Grains & Oilseeds \"Corn\": \"ZC=F\", \"Wheat\": \"ZW=F\", \"Soybeans\": \"ZS=F\", \"Soybean Meal\": \"ZM=F\", \"Soybean Oil\": \"ZL=F\", \"Oats\": \"ZO=F\", # Canola is traded on ICE Canada, not reliably on Yahoo # Livestock \"Live Cattle\": \"LE=F\", \"Feeder Cattle\": \"GF=F\", \"Lean Hogs\": \"HE=F\", # Pork Belly: contract discontinued # Metals \"Gold\": \"GC=F\", \"Silver\": \"SI=F\", \"Copper\": \"HG=F\", \"Platinum\": \"PL=F\", \"Palladium\": \"PA=F\", # LME metals (Aluminum, Zinc, Nickel, etc.) are not on Yahoo Finance # Softs \"Coffee\": \"KC=F\", \"Cocoa\": \"CC=F\", \"Cotton\": \"CT=F\", \"Sugar\": \"SB=F\", \"Orange Juice\": \"OJ=F\", \"Lumber\": \"LB=F\", # Rubber is TOCOM, not on Yahoo # Ethanol and Milk may not have reliable tickers on Yahoo # Others \"Ethanol\": \"EH=F\", # may exist, but not always available \"Skim Milk\": \"DA=F\", # Approximate dairy futures ticker } # Download monthly data df = yf.download(list(tickers.values()), start=\"2000-01-01\", interval=\"1d\", auto_adjust=False) df = df.stack(level=1).reset_index() # Convert from wide to long format # Convert to Polars DataFrame pl_df = pl.from_pandas(df) # Rename columns to lowercase and consistent names pl_df = pl_df.rename({ \"Date\": \"date\", \"Ticker\": \"symbol\", \"Adj Close\": \"adjusted_close\", \"Close\": \"close\", \"Open\": \"open\", \"High\": \"high\", \"Low\": \"low\", \"Volume\": \"volume\" }) # Reorder columns pl_df = pl_df.select([\"date\", \"symbol\", \"volume\", \"open\", \"low\", \"high\", \"close\", \"adjusted_close\"] ).filter(pl.col(\"adjusted_close\") > 0) print(pl_df.head()) pl_df.write_parquet(\"commodity_futures.parquet\") shape: (5, 8) \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 dat \u2506 sym \u2506 vol \u2506 ope \u2506 low \u2506 hig \u2506 clo \u2506 adjus \u2502 \u2502 e \u2506 bol \u2506 ume \u2506 n \u2506 --- \u2506 h \u2506 se \u2506 ted_c \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 f64 \u2506 --- \u2506 --- \u2506 lose \u2502 \u2502 dat \u2506 str \u2506 f64 \u2506 f64 \u2506 \u2506 f64 \u2506 f64 \u2506 --- \u2502 \u2502 eti \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 f64 \u2502 \u2502 me[ \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 ns] \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 200 \u2506 CT= \u2506 803 \u2506 50. \u2506 50. \u2506 51. \u2506 51. \u2506 51.07 \u2502 \u2502 0-0 \u2506 F \u2506 3.0 \u2506 43 \u2506 349 \u2506 099 \u2506 07 \u2506 \u2502 \u2502 1-0 \u2506 \u2506 \u2506 \u2506 998 \u2506 998 \u2506 \u2506 \u2502 \u2502 3 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 200 \u2506 KC= \u2506 664 \u2506 124 \u2506 116 \u2506 124 \u2506 116 \u2506 116.5 \u2502 \u2502 0-0 \u2506 F \u2506 0.0 \u2506 .0 \u2506 .09 \u2506 .0 \u2506 .5 \u2506 \u2502 \u2502 1-0 \u2506 \u2506 \u2506 \u2506 999 \u2506 \u2506 \u2506 \u2502 \u2502 3 \u2506 \u2506 \u2506 \u2506 8 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 200 \u2506 CT= \u2506 470 \u2506 50. \u2506 50. \u2506 50. \u2506 50. \u2506 50.73 \u2502 \u2502 0-0 \u2506 F \u2506 9.0 \u2506 900 \u2506 25 \u2506 970 \u2506 73 \u2506 \u2502 \u2502 1-0 \u2506 \u2506 \u2506 002 \u2506 \u2506 001 \u2506 \u2506 \u2502 \u2502 4 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 200 \u2506 KC= \u2506 549 \u2506 116 \u2506 115 \u2506 120 \u2506 116 \u2506 116.2 \u2502 \u2502 0-0 \u2506 F \u2506 2.0 \u2506 .5 \u2506 .75 \u2506 .5 \u2506 .25 \u2506 5 \u2502 \u2502 1-0 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 4 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 200 \u2506 CT= \u2506 104 \u2506 50. \u2506 50. \u2506 51. \u2506 51. \u2506 51.56 \u2502 \u2502 0-0 \u2506 F \u2506 64. \u2506 75 \u2506 75 \u2506 84 \u2506 560 \u2506 0001 \u2502 \u2502 1-0 \u2506 \u2506 0 \u2506 \u2506 \u2506 \u2506 001 \u2506 \u2502 \u2502 5 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Next, we use the plotnine library to visualize the soybean futures prices. from plotnine import * import pandas as pd import polars as pl soybean_price = ( pl.read_parquet(\"commodity_futures.parquet\").filter(pl.col(\"symbol\") == \"ZS=F\").to_pandas() ) soybean_prices_figure = ( ggplot(soybean_price, aes(x=\"date\", y=\"adjusted_close\")) + geom_line(color=\"blue\") + labs(title=\"Soybean Futures Prices\", x=\"Date\", y=\"Adjusted Close Price\") ) soybean_prices_figure.show() soybeans_returns_figure.save(\"../../docs/docs/images/priced_factors/soybeans_returns_distribution.png\", dpi=300, width=8, height=6) We can now calculate the daily returns for each commodity futures contract. The following code snippet demonstrates how to compute the percentage change in the adjusted close prices and save the results in a new Parquet file. import polars as pl data = pl.read_parquet(\"commodity_futures.parquet\") returns = ( data .sort([\"symbol\", \"date\"]) .group_by(\"symbol\") .map_groups( lambda df: df.select([ pl.col(\"date\"), pl.col(\"symbol\"), pl.col(\"adjusted_close\").pct_change().alias(\"ret\") ]) ) .filter(pl.col(\"ret\").is_not_null()) ) print(returns.head()) returns.write_parquet(\"commodity_futures_returns.parquet\") shape: (5, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 date \u2506 symbol \u2506 ret \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 datetime[ns] \u2506 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 2000-08-24 00:00:00 \u2506 CL=F \u2506 -0.013105 \u2502 \u2502 2000-08-25 00:00:00 \u2506 CL=F \u2506 0.013279 \u2502 \u2502 2000-08-28 00:00:00 \u2506 CL=F \u2506 0.025585 \u2502 \u2502 2000-08-29 00:00:00 \u2506 CL=F \u2506 -0.004563 \u2502 \u2502 2000-08-30 00:00:00 \u2506 CL=F \u2506 0.020782 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Now, we can visualize the distribution of daily returns for soybean futures using the plotnine library. The following code snippet creates a histogram of the returns and saves it as an image file. import polars as pl import pandas as pd from plotnine import * from mizani.formatters import percent_format returns = (pl.read_parquet(\"commodity_futures_returns.parquet\") .filter( # soybeans pl.col(\"symbol\") == \"ZS=F\" ) .to_pandas() ) quantile_05 = returns[\"ret\"].quantile(0.05) soybeans_returns_figure = ( ggplot(returns, aes(x=\"ret\")) + geom_histogram(bins=100, fill=\"blue\", color=\"black\", alpha=0.7) + geom_vline(aes(xintercept=quantile_05), linetype=\"dashed\") + labs(x=\"\", y=\"\", title=\"Distribution of daily returns Soybean futures returns\") + scale_x_continuous(labels=percent_format()) ) soybeans_returns_figure.save(\"soybeans_returns_distribution.png\", dpi=300, width=8, height=6) # Display the figure soybeans_returns_figure.show() We can also compute the descriptive statistics of the daily returns for all commodity futures. The following code snippet reads the returns data from the Parquet file and calculates the descriptive statistics, rounding the results to three decimal places. import polars as pl returns = (pl.read_parquet(\"commodity_futures_returns.parquet\") ) desc = returns.select(\"ret\").describe() print(desc.with_columns( pl.col(\"ret\").round(3) )) shape: (9, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 statistic \u2506 ret \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 count \u2506 62607.0 \u2502 \u2502 null_count \u2506 0.0 \u2502 \u2502 mean \u2506 0.0 \u2502 \u2502 std \u2506 0.025 \u2502 \u2502 min \u2506 -3.06 \u2502 \u2502 25% \u2506 -0.01 \u2502 \u2502 50% \u2506 0.0 \u2502 \u2502 75% \u2506 0.01 \u2502 \u2502 max \u2506 0.465 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Finally, we can visualize the commodity futures prices over time using the plotnine library. The following code snippet creates a line plot of the adjusted close prices for all commodities and saves it as an image file. from plotnine import * import pandas as pd import polars as pl prices = ( pl.read_parquet(\"commodity_futures.parquet\").to_pandas() ) from mizani.breaks import date_breaks from mizani.formatters import date_format prices_figure = ( ggplot(prices, aes(y=\"adjusted_close\", x=\"date\", color=\"symbol\")) + geom_line() + scale_x_datetime(date_breaks=\"5 years\", date_labels=\"%Y\") + labs(x=\"\", y=\"\", color=\"\", title=\"Commodity Futures Prices\") + theme(legend_position=\"none\") ) prices_figure.show() prices_figure.save(\"../../docs/docs/images/priced_factors/commodity_futures_prices.png\", dpi=300, width=10, height=6) Commodity Factor Portfolios To form the commodity factor portfolios, we rely on the simple portfolio sort. The idea is simple. On one date: Rank commodities according to a particular criterion (e.g., past returns). form \\(J \\geq 2\\) portfolios (i.e., homogenous groups) consisting on the same number of stocks according to the ranking (usually \\(J=2\\), \\(J=3\\), \\(J=5\\) or \\(J=10\\) portfolios are built, based on the median, terciles, quintiles or deciles of the criterion); the weight of stocks inside the portfolio is uniform in our case. at a future date \\(t+1\\), report the returns of the portfolios. Then iterate the procedure until the chronological end of the sample. The outcome is a time series of portfolio returns \\(r^j_t\\) for each portfolio \\(j\\) and time \\(t\\). An anomaly is identified if the \\(t\\)-test between the first \\(j=1\\) and the last group \\(j=J\\) unveils a significant difference in average returns. We first construct the momentum characteristic, which is the cumulative return of the past 11 months (excluding the most recent month). This is done by calculating the cumulative product of \\(1 + r_t\\) for the past 11 months. import pandas as pd import numpy as np import statsmodels.api as sm from regtabletotext import prettify_result LOW_Q, HIGH_Q = 0.01, 0.99 # 1-percent winsorisation tails # \u2500\u2500 1. Load panel of excess returns \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # expected columns: date (yyy-mm-dd), ticker, ret (monthly excess return in decimal form) raw = ( pd.read_parquet(\"commodity_futures_returns.parquet\") .query(\"date >= '2010-01-01'\") # filter for dates if needed ) # 2. Winsorise returns cross-sectionally each month def winsorise_month(df: pd.DataFrame) -> pd.DataFrame: \"\"\"Clip ret to [1st, 99th] percentile for this month\u2019s cross section.\"\"\" lo = df[\"ret\"].quantile(LOW_Q) hi = df[\"ret\"].quantile(HIGH_Q) return df.assign(ret=df[\"ret\"].clip(lower=lo, upper=hi)) wins = ( raw .assign(date=lambda d: pd.to_datetime(d[\"date\"])) .groupby(\"date\") .apply(winsorise_month) .reset_index(drop=True) ) # \u2500\u2500 2. Momentum: cumulative product of (1+ret) for the past 11 months \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # but we have in daily data, so we need to adjust the window # to account for the number of trading days in a month (typically around 20-22 # trading days per month). # Here we use a window of 11 months, which is approximately 220 trading days. def add_momentum(df: pd.DataFrame, window: int = 220) -> pd.DataFrame: \"\"\" Add a 'momentum' column: cumulative return from t-12 to t-2 (skip the most-recent month, hence shift(1)). \"\"\" # Ensure date column is datetime and properly sorted df = df.assign(date=pd.to_datetime(df[\"date\"])).sort_values(\"date\") # Rolling cumulative return = \u03a0(1+ret) \u2212 1 df[\"momentum\"] = ( df[\"ret\"] .shift(1) # skip last month .rolling(window=window, min_periods=window) # t-12 \u2026 t-2 (11 obs) .apply(lambda x: (1 + x).prod() - 1, raw=True) ) return df panel = ( wins .groupby(\"symbol\") # keep original index .apply(add_momentum) .reset_index(drop=True) .dropna(subset=[\"momentum\"]) # drop rows where momentum is NaN ) We will rebalance the portfolios monthly, using the momentum characteristic to sort the commodities into quantiles. The following code snippet demonstrates how to create the portfolios based on momentum and calculate their returns. panel[\"rebalance_date\"] = panel[\"date\"].dt.to_period(\"M\").dt.to_timestamp() # \u2500\u2500 4. Month-by-month portfolio formation \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # and equal-weight (mean) portfolio returns n_port = 3 # quintiles (change as desired) rebalancing_universe = ( panel .drop_duplicates(subset=[\"symbol\", \"rebalance_date\"]) # one row per symbol per month .groupby(\"rebalance_date\") .apply(lambda x: x.assign( portfolio=pd.qcut(x[\"momentum\"], q=[0, 0.5, 1], labels=[\"low\", \"high\"]) )) .reset_index(drop=True) .dropna(subset=[\"portfolio\"]) .get([\"symbol\", \"rebalance_date\", \"portfolio\"]) ) # Merge daily panel with monthly portfolio assignment panel_with_portfolio = ( panel .merge(rebalancing_universe, on=[\"symbol\", \"rebalance_date\"], how=\"left\") .dropna(subset=[\"portfolio\"]) # drop rows before first assignment ) daily_portfolio_returns = ( panel_with_portfolio .groupby([\"date\", \"portfolio\"], as_index=False) .agg(ret=(\"ret\", \"mean\")) # equal-weight return ) cumulative_rets = ( daily_portfolio_returns.sort_values([\"portfolio\", \"date\"]) # sort by portfolio and date .groupby(\"portfolio\") # one time-series per portfolio .apply(lambda df: df.assign( cumulative_ret=(1 + df[\"ret\"]).cumprod() # running product minus 1 )) .reset_index(drop=True) ) cumulative_rets.to_csv(\"cumulative_momentum_portfolios.csv\", index=False) from plotnine import * # \u2500\u2500 5. Plotting the portfolio returns \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 plot = ( ggplot(cumulative_rets, aes(x=\"date\", y=\"cumulative_ret\", color=\"portfolio\")) + geom_line() + labs(title=\"Momentum Portfolio Returns\", x=\"Date\", y=\"Monthly Return\", color=\"Portfolio\") ) plot.show() Interestingly, the low momentum portfolio seems to outperform the high momentum portfolio, which is contrary to the typical expectation in momentum strategies. Based on the previous insights, we construct a reversal portfolio by taking the difference between the low and high momentum portfolios. In other words, we create a long-short portfolio that goes long on the low momentum portfolio and short on the high momentum portfolio. long_short = (daily_portfolio_returns .pivot_table(index=\"date\", columns=\"portfolio\", values=\"ret\") .reset_index() .assign(long_short=lambda x: x[\"low\"]-x[\"high\"]) ) cum_long_short = ( long_short .assign(cumulative_long_short=lambda x: (1 + x[\"long_short\"]).cumprod() - 1) ) # plot long short returns plot_ls = ( ggplot(cum_long_short, aes(x=\"date\", y=\"cumulative_long_short\")) + geom_line(color=\"blue\") + labs(title=\"Cumulative Long-Short Momentum Returns\", x=\"Date\", y=\"Cumulative Return\") ) plot_ls.show() We now compare the cumulative returns of the long-short reversal portfolio with the equal-weighted market portfolio. The market portfolio is constructed by averaging the daily returns of all commodities, which gives us a benchmark to assess the performance of our reversal strategy. # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # 1. Equal-weight \u201cmarket\u201d portfolio (all contracts each day) \ud83d\udea9 # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 market_daily = ( wins # winsorised daily returns you already created .groupby(\"date\", as_index=False) .agg(mkt_ret=(\"ret\", \"mean\")) # simple equal-weight ) # cumulative market return market_cum = ( market_daily .assign(cumulative_mkt=lambda d: (1 + d[\"mkt_ret\"]).cumprod() - 1) .get([\"date\", \"cumulative_mkt\"]) ) # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # 2. Combine long-short and market series for plotting \ud83d\udea9 # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 plot_df = ( cum_long_short[[\"date\", \"cumulative_long_short\"]] .merge(market_cum, on=\"date\", how=\"inner\") .melt(id_vars=\"date\", var_name=\"series\", value_name=\"cum_ret\") .replace({ \"cumulative_long_short\": \"Long-Short factor\", \"cumulative_mkt\": \"Commodity market\" }) ) plot_both = ( ggplot(plot_df, aes(x=\"date\", y=\"cum_ret\", color=\"series\")) + geom_line() + labs( title=\"Cumulative Return: Momentum Long-Short vs. Commodity Market\", x=\"Date\", y=\"Cumulative Return\", color=\"\" ) ) plot_both.show() We can finally test the significance of the long-short portfolio returns using a t-test. This will help us determine if the average returns of the long-short portfolio are significantly different from zero. import statsmodels.api as sm from regtabletotext import prettify_result model_fit = (sm.OLS.from_formula( formula=\"long_short ~ 1\", data=long_short ) .fit(cov_type=\"HAC\", cov_kwds={\"maxlags\": 6}) ) prettify_result(model_fit) OLS Model: long_short ~ 1 Coefficients: Estimate Std. Error t-Statistic p-Value Intercept 0.0 0.0 2.17 0.03 Summary statistics: - Number of observations: 3,672 - R-squared: 0.000, Adjusted R-squared: 0.000 - F-statistic not available Since p = 0.03 < 0.05, we can reject the null of zero mean at the 5 % level. This means that the average return of the long-short reversal portfolio is statistically significant, indicating that the strategy has a positive expected return over the sample period.","title":"Factor Investing in Commodities"},{"location":"factor_investing/#factor-investing-in-commodities","text":"When using yfinance for commodity futures, we observe only the front-month futures prices , typically rolled automatically. This allows us to construct: Excess returns on fully collateralized long futures positions. Momentum from rolling 12-month returns. Average Commodity Factor as the equal-weighted return across contracts. However, we cannot construct basis-related factors: Basis requires both front- and second-nearby prices. Basis-Momentum needs the term structure slope over time. Thus, our pricing tests will focus on factors we can construct reliably with yfinance .","title":"Factor investing in commodities"},{"location":"factor_investing/#commodity-futures","text":"Yahoo Finance provides daily prices of nearest futures contracts, specifically what they call continuous front-month futures for commodities (e.h., CL=F for WTI Crude Oil). These are automatically rolled contracts and do not represent a specific maturity date. In this section, we will download and process commodity futures data using the yfinance library and convert it to a Polars DataFrame. We will then save the data in Parquet format for further analysis. import yfinance as yf import polars as pl # Define commodity futures tickers tickers = { # Energy \"WTI Crude Oil\": \"CL=F\", \"Brent Crude Oil\": \"BZ=F\", \"Gasoline RBOB\": \"RB=F\", \"Heating Oil\": \"HO=F\", \"Natural Gas\": \"NG=F\", \"Propane\": \"PG=F\", # approximate or rarely available # Gasoil is not available directly on Yahoo Finance # Grains & Oilseeds \"Corn\": \"ZC=F\", \"Wheat\": \"ZW=F\", \"Soybeans\": \"ZS=F\", \"Soybean Meal\": \"ZM=F\", \"Soybean Oil\": \"ZL=F\", \"Oats\": \"ZO=F\", # Canola is traded on ICE Canada, not reliably on Yahoo # Livestock \"Live Cattle\": \"LE=F\", \"Feeder Cattle\": \"GF=F\", \"Lean Hogs\": \"HE=F\", # Pork Belly: contract discontinued # Metals \"Gold\": \"GC=F\", \"Silver\": \"SI=F\", \"Copper\": \"HG=F\", \"Platinum\": \"PL=F\", \"Palladium\": \"PA=F\", # LME metals (Aluminum, Zinc, Nickel, etc.) are not on Yahoo Finance # Softs \"Coffee\": \"KC=F\", \"Cocoa\": \"CC=F\", \"Cotton\": \"CT=F\", \"Sugar\": \"SB=F\", \"Orange Juice\": \"OJ=F\", \"Lumber\": \"LB=F\", # Rubber is TOCOM, not on Yahoo # Ethanol and Milk may not have reliable tickers on Yahoo # Others \"Ethanol\": \"EH=F\", # may exist, but not always available \"Skim Milk\": \"DA=F\", # Approximate dairy futures ticker } # Download monthly data df = yf.download(list(tickers.values()), start=\"2000-01-01\", interval=\"1d\", auto_adjust=False) df = df.stack(level=1).reset_index() # Convert from wide to long format # Convert to Polars DataFrame pl_df = pl.from_pandas(df) # Rename columns to lowercase and consistent names pl_df = pl_df.rename({ \"Date\": \"date\", \"Ticker\": \"symbol\", \"Adj Close\": \"adjusted_close\", \"Close\": \"close\", \"Open\": \"open\", \"High\": \"high\", \"Low\": \"low\", \"Volume\": \"volume\" }) # Reorder columns pl_df = pl_df.select([\"date\", \"symbol\", \"volume\", \"open\", \"low\", \"high\", \"close\", \"adjusted_close\"] ).filter(pl.col(\"adjusted_close\") > 0) print(pl_df.head()) pl_df.write_parquet(\"commodity_futures.parquet\") shape: (5, 8) \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 dat \u2506 sym \u2506 vol \u2506 ope \u2506 low \u2506 hig \u2506 clo \u2506 adjus \u2502 \u2502 e \u2506 bol \u2506 ume \u2506 n \u2506 --- \u2506 h \u2506 se \u2506 ted_c \u2502 \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 f64 \u2506 --- \u2506 --- \u2506 lose \u2502 \u2502 dat \u2506 str \u2506 f64 \u2506 f64 \u2506 \u2506 f64 \u2506 f64 \u2506 --- \u2502 \u2502 eti \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 f64 \u2502 \u2502 me[ \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 ns] \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 200 \u2506 CT= \u2506 803 \u2506 50. \u2506 50. \u2506 51. \u2506 51. \u2506 51.07 \u2502 \u2502 0-0 \u2506 F \u2506 3.0 \u2506 43 \u2506 349 \u2506 099 \u2506 07 \u2506 \u2502 \u2502 1-0 \u2506 \u2506 \u2506 \u2506 998 \u2506 998 \u2506 \u2506 \u2502 \u2502 3 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 200 \u2506 KC= \u2506 664 \u2506 124 \u2506 116 \u2506 124 \u2506 116 \u2506 116.5 \u2502 \u2502 0-0 \u2506 F \u2506 0.0 \u2506 .0 \u2506 .09 \u2506 .0 \u2506 .5 \u2506 \u2502 \u2502 1-0 \u2506 \u2506 \u2506 \u2506 999 \u2506 \u2506 \u2506 \u2502 \u2502 3 \u2506 \u2506 \u2506 \u2506 8 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 200 \u2506 CT= \u2506 470 \u2506 50. \u2506 50. \u2506 50. \u2506 50. \u2506 50.73 \u2502 \u2502 0-0 \u2506 F \u2506 9.0 \u2506 900 \u2506 25 \u2506 970 \u2506 73 \u2506 \u2502 \u2502 1-0 \u2506 \u2506 \u2506 002 \u2506 \u2506 001 \u2506 \u2506 \u2502 \u2502 4 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 200 \u2506 KC= \u2506 549 \u2506 116 \u2506 115 \u2506 120 \u2506 116 \u2506 116.2 \u2502 \u2502 0-0 \u2506 F \u2506 2.0 \u2506 .5 \u2506 .75 \u2506 .5 \u2506 .25 \u2506 5 \u2502 \u2502 1-0 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 4 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 200 \u2506 CT= \u2506 104 \u2506 50. \u2506 50. \u2506 51. \u2506 51. \u2506 51.56 \u2502 \u2502 0-0 \u2506 F \u2506 64. \u2506 75 \u2506 75 \u2506 84 \u2506 560 \u2506 0001 \u2502 \u2502 1-0 \u2506 \u2506 0 \u2506 \u2506 \u2506 \u2506 001 \u2506 \u2502 \u2502 5 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00: \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2502 00 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2506 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Next, we use the plotnine library to visualize the soybean futures prices. from plotnine import * import pandas as pd import polars as pl soybean_price = ( pl.read_parquet(\"commodity_futures.parquet\").filter(pl.col(\"symbol\") == \"ZS=F\").to_pandas() ) soybean_prices_figure = ( ggplot(soybean_price, aes(x=\"date\", y=\"adjusted_close\")) + geom_line(color=\"blue\") + labs(title=\"Soybean Futures Prices\", x=\"Date\", y=\"Adjusted Close Price\") ) soybean_prices_figure.show() soybeans_returns_figure.save(\"../../docs/docs/images/priced_factors/soybeans_returns_distribution.png\", dpi=300, width=8, height=6) We can now calculate the daily returns for each commodity futures contract. The following code snippet demonstrates how to compute the percentage change in the adjusted close prices and save the results in a new Parquet file. import polars as pl data = pl.read_parquet(\"commodity_futures.parquet\") returns = ( data .sort([\"symbol\", \"date\"]) .group_by(\"symbol\") .map_groups( lambda df: df.select([ pl.col(\"date\"), pl.col(\"symbol\"), pl.col(\"adjusted_close\").pct_change().alias(\"ret\") ]) ) .filter(pl.col(\"ret\").is_not_null()) ) print(returns.head()) returns.write_parquet(\"commodity_futures_returns.parquet\") shape: (5, 3) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 date \u2506 symbol \u2506 ret \u2502 \u2502 --- \u2506 --- \u2506 --- \u2502 \u2502 datetime[ns] \u2506 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 2000-08-24 00:00:00 \u2506 CL=F \u2506 -0.013105 \u2502 \u2502 2000-08-25 00:00:00 \u2506 CL=F \u2506 0.013279 \u2502 \u2502 2000-08-28 00:00:00 \u2506 CL=F \u2506 0.025585 \u2502 \u2502 2000-08-29 00:00:00 \u2506 CL=F \u2506 -0.004563 \u2502 \u2502 2000-08-30 00:00:00 \u2506 CL=F \u2506 0.020782 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Now, we can visualize the distribution of daily returns for soybean futures using the plotnine library. The following code snippet creates a histogram of the returns and saves it as an image file. import polars as pl import pandas as pd from plotnine import * from mizani.formatters import percent_format returns = (pl.read_parquet(\"commodity_futures_returns.parquet\") .filter( # soybeans pl.col(\"symbol\") == \"ZS=F\" ) .to_pandas() ) quantile_05 = returns[\"ret\"].quantile(0.05) soybeans_returns_figure = ( ggplot(returns, aes(x=\"ret\")) + geom_histogram(bins=100, fill=\"blue\", color=\"black\", alpha=0.7) + geom_vline(aes(xintercept=quantile_05), linetype=\"dashed\") + labs(x=\"\", y=\"\", title=\"Distribution of daily returns Soybean futures returns\") + scale_x_continuous(labels=percent_format()) ) soybeans_returns_figure.save(\"soybeans_returns_distribution.png\", dpi=300, width=8, height=6) # Display the figure soybeans_returns_figure.show() We can also compute the descriptive statistics of the daily returns for all commodity futures. The following code snippet reads the returns data from the Parquet file and calculates the descriptive statistics, rounding the results to three decimal places. import polars as pl returns = (pl.read_parquet(\"commodity_futures_returns.parquet\") ) desc = returns.select(\"ret\").describe() print(desc.with_columns( pl.col(\"ret\").round(3) )) shape: (9, 2) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 statistic \u2506 ret \u2502 \u2502 --- \u2506 --- \u2502 \u2502 str \u2506 f64 \u2502 \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 \u2502 count \u2506 62607.0 \u2502 \u2502 null_count \u2506 0.0 \u2502 \u2502 mean \u2506 0.0 \u2502 \u2502 std \u2506 0.025 \u2502 \u2502 min \u2506 -3.06 \u2502 \u2502 25% \u2506 -0.01 \u2502 \u2502 50% \u2506 0.0 \u2502 \u2502 75% \u2506 0.01 \u2502 \u2502 max \u2506 0.465 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Finally, we can visualize the commodity futures prices over time using the plotnine library. The following code snippet creates a line plot of the adjusted close prices for all commodities and saves it as an image file. from plotnine import * import pandas as pd import polars as pl prices = ( pl.read_parquet(\"commodity_futures.parquet\").to_pandas() ) from mizani.breaks import date_breaks from mizani.formatters import date_format prices_figure = ( ggplot(prices, aes(y=\"adjusted_close\", x=\"date\", color=\"symbol\")) + geom_line() + scale_x_datetime(date_breaks=\"5 years\", date_labels=\"%Y\") + labs(x=\"\", y=\"\", color=\"\", title=\"Commodity Futures Prices\") + theme(legend_position=\"none\") ) prices_figure.show() prices_figure.save(\"../../docs/docs/images/priced_factors/commodity_futures_prices.png\", dpi=300, width=10, height=6)","title":"Commodity Futures"},{"location":"factor_investing/#commodity-factor-portfolios","text":"To form the commodity factor portfolios, we rely on the simple portfolio sort. The idea is simple. On one date: Rank commodities according to a particular criterion (e.g., past returns). form \\(J \\geq 2\\) portfolios (i.e., homogenous groups) consisting on the same number of stocks according to the ranking (usually \\(J=2\\), \\(J=3\\), \\(J=5\\) or \\(J=10\\) portfolios are built, based on the median, terciles, quintiles or deciles of the criterion); the weight of stocks inside the portfolio is uniform in our case. at a future date \\(t+1\\), report the returns of the portfolios. Then iterate the procedure until the chronological end of the sample. The outcome is a time series of portfolio returns \\(r^j_t\\) for each portfolio \\(j\\) and time \\(t\\). An anomaly is identified if the \\(t\\)-test between the first \\(j=1\\) and the last group \\(j=J\\) unveils a significant difference in average returns. We first construct the momentum characteristic, which is the cumulative return of the past 11 months (excluding the most recent month). This is done by calculating the cumulative product of \\(1 + r_t\\) for the past 11 months. import pandas as pd import numpy as np import statsmodels.api as sm from regtabletotext import prettify_result LOW_Q, HIGH_Q = 0.01, 0.99 # 1-percent winsorisation tails # \u2500\u2500 1. Load panel of excess returns \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # expected columns: date (yyy-mm-dd), ticker, ret (monthly excess return in decimal form) raw = ( pd.read_parquet(\"commodity_futures_returns.parquet\") .query(\"date >= '2010-01-01'\") # filter for dates if needed ) # 2. Winsorise returns cross-sectionally each month def winsorise_month(df: pd.DataFrame) -> pd.DataFrame: \"\"\"Clip ret to [1st, 99th] percentile for this month\u2019s cross section.\"\"\" lo = df[\"ret\"].quantile(LOW_Q) hi = df[\"ret\"].quantile(HIGH_Q) return df.assign(ret=df[\"ret\"].clip(lower=lo, upper=hi)) wins = ( raw .assign(date=lambda d: pd.to_datetime(d[\"date\"])) .groupby(\"date\") .apply(winsorise_month) .reset_index(drop=True) ) # \u2500\u2500 2. Momentum: cumulative product of (1+ret) for the past 11 months \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # but we have in daily data, so we need to adjust the window # to account for the number of trading days in a month (typically around 20-22 # trading days per month). # Here we use a window of 11 months, which is approximately 220 trading days. def add_momentum(df: pd.DataFrame, window: int = 220) -> pd.DataFrame: \"\"\" Add a 'momentum' column: cumulative return from t-12 to t-2 (skip the most-recent month, hence shift(1)). \"\"\" # Ensure date column is datetime and properly sorted df = df.assign(date=pd.to_datetime(df[\"date\"])).sort_values(\"date\") # Rolling cumulative return = \u03a0(1+ret) \u2212 1 df[\"momentum\"] = ( df[\"ret\"] .shift(1) # skip last month .rolling(window=window, min_periods=window) # t-12 \u2026 t-2 (11 obs) .apply(lambda x: (1 + x).prod() - 1, raw=True) ) return df panel = ( wins .groupby(\"symbol\") # keep original index .apply(add_momentum) .reset_index(drop=True) .dropna(subset=[\"momentum\"]) # drop rows where momentum is NaN ) We will rebalance the portfolios monthly, using the momentum characteristic to sort the commodities into quantiles. The following code snippet demonstrates how to create the portfolios based on momentum and calculate their returns. panel[\"rebalance_date\"] = panel[\"date\"].dt.to_period(\"M\").dt.to_timestamp() # \u2500\u2500 4. Month-by-month portfolio formation \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # and equal-weight (mean) portfolio returns n_port = 3 # quintiles (change as desired) rebalancing_universe = ( panel .drop_duplicates(subset=[\"symbol\", \"rebalance_date\"]) # one row per symbol per month .groupby(\"rebalance_date\") .apply(lambda x: x.assign( portfolio=pd.qcut(x[\"momentum\"], q=[0, 0.5, 1], labels=[\"low\", \"high\"]) )) .reset_index(drop=True) .dropna(subset=[\"portfolio\"]) .get([\"symbol\", \"rebalance_date\", \"portfolio\"]) ) # Merge daily panel with monthly portfolio assignment panel_with_portfolio = ( panel .merge(rebalancing_universe, on=[\"symbol\", \"rebalance_date\"], how=\"left\") .dropna(subset=[\"portfolio\"]) # drop rows before first assignment ) daily_portfolio_returns = ( panel_with_portfolio .groupby([\"date\", \"portfolio\"], as_index=False) .agg(ret=(\"ret\", \"mean\")) # equal-weight return ) cumulative_rets = ( daily_portfolio_returns.sort_values([\"portfolio\", \"date\"]) # sort by portfolio and date .groupby(\"portfolio\") # one time-series per portfolio .apply(lambda df: df.assign( cumulative_ret=(1 + df[\"ret\"]).cumprod() # running product minus 1 )) .reset_index(drop=True) ) cumulative_rets.to_csv(\"cumulative_momentum_portfolios.csv\", index=False) from plotnine import * # \u2500\u2500 5. Plotting the portfolio returns \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 plot = ( ggplot(cumulative_rets, aes(x=\"date\", y=\"cumulative_ret\", color=\"portfolio\")) + geom_line() + labs(title=\"Momentum Portfolio Returns\", x=\"Date\", y=\"Monthly Return\", color=\"Portfolio\") ) plot.show() Interestingly, the low momentum portfolio seems to outperform the high momentum portfolio, which is contrary to the typical expectation in momentum strategies. Based on the previous insights, we construct a reversal portfolio by taking the difference between the low and high momentum portfolios. In other words, we create a long-short portfolio that goes long on the low momentum portfolio and short on the high momentum portfolio. long_short = (daily_portfolio_returns .pivot_table(index=\"date\", columns=\"portfolio\", values=\"ret\") .reset_index() .assign(long_short=lambda x: x[\"low\"]-x[\"high\"]) ) cum_long_short = ( long_short .assign(cumulative_long_short=lambda x: (1 + x[\"long_short\"]).cumprod() - 1) ) # plot long short returns plot_ls = ( ggplot(cum_long_short, aes(x=\"date\", y=\"cumulative_long_short\")) + geom_line(color=\"blue\") + labs(title=\"Cumulative Long-Short Momentum Returns\", x=\"Date\", y=\"Cumulative Return\") ) plot_ls.show() We now compare the cumulative returns of the long-short reversal portfolio with the equal-weighted market portfolio. The market portfolio is constructed by averaging the daily returns of all commodities, which gives us a benchmark to assess the performance of our reversal strategy. # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # 1. Equal-weight \u201cmarket\u201d portfolio (all contracts each day) \ud83d\udea9 # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 market_daily = ( wins # winsorised daily returns you already created .groupby(\"date\", as_index=False) .agg(mkt_ret=(\"ret\", \"mean\")) # simple equal-weight ) # cumulative market return market_cum = ( market_daily .assign(cumulative_mkt=lambda d: (1 + d[\"mkt_ret\"]).cumprod() - 1) .get([\"date\", \"cumulative_mkt\"]) ) # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 # 2. Combine long-short and market series for plotting \ud83d\udea9 # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 plot_df = ( cum_long_short[[\"date\", \"cumulative_long_short\"]] .merge(market_cum, on=\"date\", how=\"inner\") .melt(id_vars=\"date\", var_name=\"series\", value_name=\"cum_ret\") .replace({ \"cumulative_long_short\": \"Long-Short factor\", \"cumulative_mkt\": \"Commodity market\" }) ) plot_both = ( ggplot(plot_df, aes(x=\"date\", y=\"cum_ret\", color=\"series\")) + geom_line() + labs( title=\"Cumulative Return: Momentum Long-Short vs. Commodity Market\", x=\"Date\", y=\"Cumulative Return\", color=\"\" ) ) plot_both.show() We can finally test the significance of the long-short portfolio returns using a t-test. This will help us determine if the average returns of the long-short portfolio are significantly different from zero. import statsmodels.api as sm from regtabletotext import prettify_result model_fit = (sm.OLS.from_formula( formula=\"long_short ~ 1\", data=long_short ) .fit(cov_type=\"HAC\", cov_kwds={\"maxlags\": 6}) ) prettify_result(model_fit) OLS Model: long_short ~ 1 Coefficients: Estimate Std. Error t-Statistic p-Value Intercept 0.0 0.0 2.17 0.03 Summary statistics: - Number of observations: 3,672 - R-squared: 0.000, Adjusted R-squared: 0.000 - F-statistic not available Since p = 0.03 < 0.05, we can reject the null of zero mean at the 5 % level. This means that the average return of the long-short reversal portfolio is statistically significant, indicating that the strategy has a positive expected return over the sample period.","title":"Commodity Factor Portfolios"},{"location":"is_physical_risk_priced/","text":"Is Physical Risk Priced in Commodities? The distribution of production sources for commodities is crucial in understanding the exposure to physical risks. Different commodities have varying levels of vulnerability based on their production locations and methods. For instance, commodities produced in regions prone to extreme weather events or natural disasters may face higher physical risks. For example, the map below shows the distribution of corn production in the world. We can evaluate the physical risk exposure of commodities by analyzing their geographic distribution and the associated hazards. The following map illustrates a sample of tropical cyclone tracks, using CLIMADA. To quantify the financial relevance of exposure to tropical cyclones, we follow a forward-looking methodology inspired by Bri\u00e8re et al. (2024). Specifically, we use the CLIMADA platform to simulate damages to commodity production assets based on both historical and synthetic tropical cyclone tracks. Following Bri\u00e8re et al. (2024), we could generate 30 synthetic tracks for each historical cyclone in the IBTrACS archive, enabling a probabilistic assessment of expected damages. For each commodity, we overlay these cyclone tracks with the geographic distribution of production (e.g., corn, sugarcane, palm oil) and compute the Expected Annual Impact (EAI) \u2014 the average projected damage to physical production assets in a given climate scenario (e.g., RCP 4.5). This risk exposure measure captures systematic climate-related shocks that are likely to affect the production of key commodities in cyclone-prone regions such as: Southeast Asia (palm oil, rice) Central America and the Caribbean (sugar, bananas) East Asia (aquaculture, rice) U.S. Gulf Coast (sugarcane, soy) We could then use these risk metrics to build a physical risk factor portfolio, assigning higher weights to commodities with greater EAI. This portfolio is intended to capture the systematic component of physical risk from cyclones, and to test whether this risk is priced in commodity markets. However, the findings in Bri\u00e8re et al. (2024) suggest that markets do not consistently price this risk. They find no significant premium associated with cyclone exposure over the period 2016\u20132022 \u2014 unless investor concerns about tropical cyclones are elevated. To proxy for these concerns, they use: Google Search Volume Index (SVI) for \"tropical cyclone\" Monthly counts of cyclone events (EM-DAT) When investor attention to cyclones is low, highly exposed firms tend to earn higher returns, consistent with compensation for bearing climate risk. But when attention is high, those same firms underperform, suggesting that investor sentiment and attention drive short-term return dynamics more than rational pricing of physical risks.","title":"Is Physical Risk Priced?"},{"location":"is_physical_risk_priced/#is-physical-risk-priced-in-commodities","text":"The distribution of production sources for commodities is crucial in understanding the exposure to physical risks. Different commodities have varying levels of vulnerability based on their production locations and methods. For instance, commodities produced in regions prone to extreme weather events or natural disasters may face higher physical risks. For example, the map below shows the distribution of corn production in the world. We can evaluate the physical risk exposure of commodities by analyzing their geographic distribution and the associated hazards. The following map illustrates a sample of tropical cyclone tracks, using CLIMADA. To quantify the financial relevance of exposure to tropical cyclones, we follow a forward-looking methodology inspired by Bri\u00e8re et al. (2024). Specifically, we use the CLIMADA platform to simulate damages to commodity production assets based on both historical and synthetic tropical cyclone tracks. Following Bri\u00e8re et al. (2024), we could generate 30 synthetic tracks for each historical cyclone in the IBTrACS archive, enabling a probabilistic assessment of expected damages. For each commodity, we overlay these cyclone tracks with the geographic distribution of production (e.g., corn, sugarcane, palm oil) and compute the Expected Annual Impact (EAI) \u2014 the average projected damage to physical production assets in a given climate scenario (e.g., RCP 4.5). This risk exposure measure captures systematic climate-related shocks that are likely to affect the production of key commodities in cyclone-prone regions such as: Southeast Asia (palm oil, rice) Central America and the Caribbean (sugar, bananas) East Asia (aquaculture, rice) U.S. Gulf Coast (sugarcane, soy) We could then use these risk metrics to build a physical risk factor portfolio, assigning higher weights to commodities with greater EAI. This portfolio is intended to capture the systematic component of physical risk from cyclones, and to test whether this risk is priced in commodity markets. However, the findings in Bri\u00e8re et al. (2024) suggest that markets do not consistently price this risk. They find no significant premium associated with cyclone exposure over the period 2016\u20132022 \u2014 unless investor concerns about tropical cyclones are elevated. To proxy for these concerns, they use: Google Search Volume Index (SVI) for \"tropical cyclone\" Monthly counts of cyclone events (EM-DAT) When investor attention to cyclones is low, highly exposed firms tend to earn higher returns, consistent with compensation for bearing climate risk. But when attention is high, those same firms underperform, suggesting that investor sentiment and attention drive short-term return dynamics more than rational pricing of physical risks.","title":"Is Physical Risk Priced in Commodities?"},{"location":"old/","text":"Physical Climate Risk and Commodity xxx","title":"Physical Climate Risk and Commodity"},{"location":"old/#physical-climate-risk-and-commodity","text":"xxx","title":"Physical Climate Risk and Commodity"},{"location":"old/comparison_vs_index/","text":"Comparing Multi-Factor Portfolios to Indexes Benchmark against: S&P GSCI Equally weighted index of all commodities Show performance metrics: Returns Volatility Sharpe ratio Maximum drawdown Highlight strengths / weaknesses of factor apporaches (part 6. Are commercial commodity indices spanned by commodity factor portfolios?) Miffre (2012) classifies commodity indices into three categories. First generation commodity indices are long-only commodity indices which capture broad commodity market movements but ignore the shape of term structure of commodity futures prices. Second generation commodity indices are constructed to avoid the harmful effects of contango and benefit from backwardation. The development of third generation commodity indices are based on commodity characteristics such as the basis or momentum while allowing for long and short positions. Generation Index Name Ticker / Abbreviation Description First Generation S&P Goldman Sachs Commodity Index S&P GSCI Broad, production-weighted index across commodity sectors. Dow Jones-UBS Commodity Index DJ UBSCI Broad index with diversification constraints. Deutsche Bank Liquid Commodity Index DBLCI Focused on liquidity, with fewer commodities and roll optimization. Second Generation Deutsche Bank Liquid Commodity Index - Optimum Yield DBLCI-OY Attempts to reduce roll losses by choosing futures along the curve. Morningstar Long-Only Commodity Index MSDIL Long-only strategy, diversified across sectors. Morningstar Long/Flat Commodity Index MSDILF Takes either long or flat (cash) positions depending on trend signals. Third Generation Morningstar Short/Flat Commodity Index MSDISF Takes short positions or stays in cash, trend-following style. Morningstar Short-Only Commodity Index MSDIS Always short commodities, without a flat/cash option. Morningstar Long/Short Commodity Index MSDILS Trend-based strategy: long if price above 12-month MA, short otherwise.","title":"Comparing Multi-Factor Portfolios to Indexes"},{"location":"old/comparison_vs_index/#comparing-multi-factor-portfolios-to-indexes","text":"Benchmark against: S&P GSCI Equally weighted index of all commodities Show performance metrics: Returns Volatility Sharpe ratio Maximum drawdown Highlight strengths / weaknesses of factor apporaches (part 6. Are commercial commodity indices spanned by commodity factor portfolios?) Miffre (2012) classifies commodity indices into three categories. First generation commodity indices are long-only commodity indices which capture broad commodity market movements but ignore the shape of term structure of commodity futures prices. Second generation commodity indices are constructed to avoid the harmful effects of contango and benefit from backwardation. The development of third generation commodity indices are based on commodity characteristics such as the basis or momentum while allowing for long and short positions. Generation Index Name Ticker / Abbreviation Description First Generation S&P Goldman Sachs Commodity Index S&P GSCI Broad, production-weighted index across commodity sectors. Dow Jones-UBS Commodity Index DJ UBSCI Broad index with diversification constraints. Deutsche Bank Liquid Commodity Index DBLCI Focused on liquidity, with fewer commodities and roll optimization. Second Generation Deutsche Bank Liquid Commodity Index - Optimum Yield DBLCI-OY Attempts to reduce roll losses by choosing futures along the curve. Morningstar Long-Only Commodity Index MSDIL Long-only strategy, diversified across sectors. Morningstar Long/Flat Commodity Index MSDILF Takes either long or flat (cash) positions depending on trend signals. Third Generation Morningstar Short/Flat Commodity Index MSDISF Takes short positions or stays in cash, trend-following style. Morningstar Short-Only Commodity Index MSDIS Always short commodities, without a flat/cash option. Morningstar Long/Short Commodity Index MSDILS Trend-based strategy: long if price above 12-month MA, short otherwise.","title":"Comparing Multi-Factor Portfolios to Indexes"},{"location":"old/concerns/","text":"","title":"Concerns"},{"location":"old/intro/","text":"Introduction to Commodity Factors There is much evidence that average commodity returns are related to observable characteristics such as momentum, basis (spot-futures spread) and hedging pressure. We can use the cost-of-carry model - the commodity market's analog to the dividend discount model - to explain why these characteristics are related to expected returns. The model states that the futures price of a commodity reflects the present value of the spot price adjusted for storage costs, financing costs, and the convenience yield: $$ F_t = S_t e^{(r + u - c)(T-t)} $$ In this equation, \\( F_t \\) is the futures price at time \\(t\\), \\(S_t\\) is the spot price at time \\(t\\), \\(r\\) is the risk-free interest rate, \\(u\\) is the storage cost, \\(c\\) is the convenience yield, and \\(T\\) is the maturity of the futures contract. The Theory of Storage The theory of storage, relates the basis, or the difference between the spot and futures prices of a commodity, to the cost of storage (transportation, warehousing and insurance costs), the interests foregone in purchasing the physical commodity and the convenience yield earned from owning the spot asset. According to the theory of storage, a negative basis (also called roll-yield) or an upward-sloping term structure of the futures prices comes hand-in-hand with high inventories. Market are then said to be in contango . In this scenario, the commodity is in abundant supply, inventory holders can buy it cheap in the spot market and sell it forward at a profit that compensates them for the costs incurred while storing and financing the asset. Assuming a constant spot price, the futures price of a contangoed contract is expected to decrease in value as maturity approaches, suggesting that a short position in a contangoed market is probably optimal. To illustrate this, suppose the current spot price of a commodity is \\(S_t = 100\\), the 6-month futures contract trades at \\(F_t = 103\\), the annualized risk-free rate is \\(r = 0.05\\), the annualized storage cost is \\(u = 0.02\\), and the time to maturity is 6 months. Rearranging to solve for the convenience yield \\(c\\): $$ c = r + u - \\frac{1}{T-t} \\ln\\left(\\frac{F_t}{S_t}\\right) $$ Substituting the values: $$ c = 0.05 + 0.02 - \\frac{1}{0.5} \\ln\\left(\\frac{103}{100}\\right) \\approx 0.07 - 2 \\cdot \\ln(1.03) \\approx 0.07 - 0.0591 \\approx 0.0109 \\text{ or } 1.09\\% $$ So, the implied convenience yield is only about 1.09% - much lower than the combined storage and financing costs of 7%. This reflects a contangoed market where: - inventories are high, - the convenience of holding the commodity is low, and - the futures price is expected to decrease as maturity approaches. In this case, a short position in the futures contract is expected to be profitable, since the futures price will tend to decline toward the spot as maturity approaches. The position basis \\(F_t > S_t\\) implies that the expected return on the futures contract is negative, assuming the spot price remains constant. Alternatively, the theory of storage argues that the basis or roll-yield should be positive when inventories are low or in the event of a stock-out. The term structure of future prices then slopes downward and markets are said to be in backwardation . Under this scenario, the commodity is expensive since it is scarce and the benefits of owning the physical asset (called convenience yield) exceed storage and financing costs. Again assuming a constant spot price, the futures price of a backwardated asset is deemed to appreciate with maturity, suggesting, this time around, that a long position is likely to be profitable. To illustrate this, now suppose the current spot price of a commodity is \\(S_t = 100\\), the 6-month futures contract trades at \\(F_t = 98\\), the annualized risk-free rate is \\(r = 0.05\\), the annualized storage cost is \\(u = 0.02\\), and the time to maturity is 6 months. Plugging these values into the convenience yield formula: $$ c = 0.05 + 0.02 - \\frac{1}{0.5} \\ln\\left(\\frac{98}{100}\\right) \\approx 0.05 + 0.02 - 2 \\cdot \\ln(0.98) \\approx 0.05 + 0.02 + 0.0404 \\approx 0.1104 \\text{ or } 11.04\\% $$ So the implied convenience yield is about 11.04% - much higher than the combined storage and financing costs of 7%. This reflects a backwardated market. In this case, this suggests that holding the physical commodity confers benefits (e.g, protection from stock-outs) large enough to make futures prices lower than spot prices. The expected return from buying the future today and taking delivery later is positive. In this case, the position basis \\(F_t < S_t\\) implies that the expected return on the futures contract is positive, assuming the spot price remains constant, and a long position in the futures contract is expected to be profitable, since the futures price will tend to increase toward the spot as maturity approaches. Hedging Pressure Hypothesis The theory of normal backwardation postulates that commodity futures markets exist to facilitate hedging. It is assumed that hedgers are net short; namely, the positions of producers who sell their output forward exceed the positions of consumers who purchase their input forward. Net short hedgers, willing to transfer their risk of a price decline to net long speculators, must entice them to take long futures positions. This is done by setting the futures price today below the spot price expected at maturity of the futures contract. In other words, futures prices are expected to rise as maturity approaches, so that net long speculators earn a positive risk premium for taking on the price risk that net short hedgers are willing to get rid of. The theory of normal backwardation thus provides a rational for long-only commodity strategies. However, noting that hedgers are not necessarily short, Cootner proposes a theoretical model, called the hedging pressures hypothesis, that allows for the possibility of net long, as well as net short, hedgers. As before with the normal backwardation theory, when hedgers are net short, the futures prices has to be set low relative to the spot price expected at maturity to entice speculators to take long future positions. Vice verse, when hedgers are net long, the futures price has to be set high relative to the spot price expected at maturity to entice speculators to take short-futures positions. As maturity approaches, the futures price of a backwardated / contangoed contract is expected to increase / decrease toward the expected spot price, enabling long / short speculators to earn a positive risk premium. It follows that if the hedging pressure hypothesis holds, speculators should be rewarded for taking long positions in backwardated contracts (when hedgers are net short) and short positions in contangoed contracts (when hedgers are net long). Momentum","title":"Introduction to Commodity Factors"},{"location":"old/intro/#introduction-to-commodity-factors","text":"There is much evidence that average commodity returns are related to observable characteristics such as momentum, basis (spot-futures spread) and hedging pressure. We can use the cost-of-carry model - the commodity market's analog to the dividend discount model - to explain why these characteristics are related to expected returns. The model states that the futures price of a commodity reflects the present value of the spot price adjusted for storage costs, financing costs, and the convenience yield: $$ F_t = S_t e^{(r + u - c)(T-t)} $$ In this equation, \\( F_t \\) is the futures price at time \\(t\\), \\(S_t\\) is the spot price at time \\(t\\), \\(r\\) is the risk-free interest rate, \\(u\\) is the storage cost, \\(c\\) is the convenience yield, and \\(T\\) is the maturity of the futures contract.","title":"Introduction to Commodity Factors"},{"location":"old/intro/#the-theory-of-storage","text":"The theory of storage, relates the basis, or the difference between the spot and futures prices of a commodity, to the cost of storage (transportation, warehousing and insurance costs), the interests foregone in purchasing the physical commodity and the convenience yield earned from owning the spot asset. According to the theory of storage, a negative basis (also called roll-yield) or an upward-sloping term structure of the futures prices comes hand-in-hand with high inventories. Market are then said to be in contango . In this scenario, the commodity is in abundant supply, inventory holders can buy it cheap in the spot market and sell it forward at a profit that compensates them for the costs incurred while storing and financing the asset. Assuming a constant spot price, the futures price of a contangoed contract is expected to decrease in value as maturity approaches, suggesting that a short position in a contangoed market is probably optimal. To illustrate this, suppose the current spot price of a commodity is \\(S_t = 100\\), the 6-month futures contract trades at \\(F_t = 103\\), the annualized risk-free rate is \\(r = 0.05\\), the annualized storage cost is \\(u = 0.02\\), and the time to maturity is 6 months. Rearranging to solve for the convenience yield \\(c\\): $$ c = r + u - \\frac{1}{T-t} \\ln\\left(\\frac{F_t}{S_t}\\right) $$ Substituting the values: $$ c = 0.05 + 0.02 - \\frac{1}{0.5} \\ln\\left(\\frac{103}{100}\\right) \\approx 0.07 - 2 \\cdot \\ln(1.03) \\approx 0.07 - 0.0591 \\approx 0.0109 \\text{ or } 1.09\\% $$ So, the implied convenience yield is only about 1.09% - much lower than the combined storage and financing costs of 7%. This reflects a contangoed market where: - inventories are high, - the convenience of holding the commodity is low, and - the futures price is expected to decrease as maturity approaches. In this case, a short position in the futures contract is expected to be profitable, since the futures price will tend to decline toward the spot as maturity approaches. The position basis \\(F_t > S_t\\) implies that the expected return on the futures contract is negative, assuming the spot price remains constant. Alternatively, the theory of storage argues that the basis or roll-yield should be positive when inventories are low or in the event of a stock-out. The term structure of future prices then slopes downward and markets are said to be in backwardation . Under this scenario, the commodity is expensive since it is scarce and the benefits of owning the physical asset (called convenience yield) exceed storage and financing costs. Again assuming a constant spot price, the futures price of a backwardated asset is deemed to appreciate with maturity, suggesting, this time around, that a long position is likely to be profitable. To illustrate this, now suppose the current spot price of a commodity is \\(S_t = 100\\), the 6-month futures contract trades at \\(F_t = 98\\), the annualized risk-free rate is \\(r = 0.05\\), the annualized storage cost is \\(u = 0.02\\), and the time to maturity is 6 months. Plugging these values into the convenience yield formula: $$ c = 0.05 + 0.02 - \\frac{1}{0.5} \\ln\\left(\\frac{98}{100}\\right) \\approx 0.05 + 0.02 - 2 \\cdot \\ln(0.98) \\approx 0.05 + 0.02 + 0.0404 \\approx 0.1104 \\text{ or } 11.04\\% $$ So the implied convenience yield is about 11.04% - much higher than the combined storage and financing costs of 7%. This reflects a backwardated market. In this case, this suggests that holding the physical commodity confers benefits (e.g, protection from stock-outs) large enough to make futures prices lower than spot prices. The expected return from buying the future today and taking delivery later is positive. In this case, the position basis \\(F_t < S_t\\) implies that the expected return on the futures contract is positive, assuming the spot price remains constant, and a long position in the futures contract is expected to be profitable, since the futures price will tend to increase toward the spot as maturity approaches.","title":"The Theory of Storage"},{"location":"old/intro/#hedging-pressure-hypothesis","text":"The theory of normal backwardation postulates that commodity futures markets exist to facilitate hedging. It is assumed that hedgers are net short; namely, the positions of producers who sell their output forward exceed the positions of consumers who purchase their input forward. Net short hedgers, willing to transfer their risk of a price decline to net long speculators, must entice them to take long futures positions. This is done by setting the futures price today below the spot price expected at maturity of the futures contract. In other words, futures prices are expected to rise as maturity approaches, so that net long speculators earn a positive risk premium for taking on the price risk that net short hedgers are willing to get rid of. The theory of normal backwardation thus provides a rational for long-only commodity strategies. However, noting that hedgers are not necessarily short, Cootner proposes a theoretical model, called the hedging pressures hypothesis, that allows for the possibility of net long, as well as net short, hedgers. As before with the normal backwardation theory, when hedgers are net short, the futures prices has to be set low relative to the spot price expected at maturity to entice speculators to take long future positions. Vice verse, when hedgers are net long, the futures price has to be set high relative to the spot price expected at maturity to entice speculators to take short-futures positions. As maturity approaches, the futures price of a backwardated / contangoed contract is expected to increase / decrease toward the expected spot price, enabling long / short speculators to earn a positive risk premium. It follows that if the hedging pressure hypothesis holds, speculators should be rewarded for taking long positions in backwardated contracts (when hedgers are net short) and short positions in contangoed contracts (when hedgers are net long).","title":"Hedging Pressure Hypothesis"},{"location":"old/intro/#momentum","text":"","title":"Momentum"},{"location":"old/portfolio_construction/","text":"How to Construct a Multi-Factor Commodity Portfolio? Explain portfolio theory in the context of multiple factors Show how to build an optimal commodity portfolio Static (equal-weight or risk-parity) vs. optimized weighting Implementation challenges (part 5. of the paper, multifactor commodity portfolios) Equally-Weighted Commodity Factor Portfolio The equally weighted commodity factor portfolio investes proportionally in each of the three commodity factors and since it does not use estimates of return or risk, is by definition free of estimation risk. EW will be mean-variance optimal when commodity factor expected returns, variances and correlations are the same. The Inverse Variance Portfolio The inverse variance (IV) portfolio rule depends only on variance and assumes that the correlation between the factors is zero. IV weights are calculated according to the following equation: $$ w_{i,t} = \\frac{1/\\sigma_{i,t}^2}{\\sum_{j=1}^{N} 1/\\sigma_{j,t}^2} $$ where \\(\\sigma_{i,t}^2\\) is the estimated variance of commodity \\(i\\). MinVar Rule MinVar rule is the short sale-constrained minimum variance portfolio of commodity factors.","title":"How to Construct a Multi-Factor Commodity Portfolio?"},{"location":"old/portfolio_construction/#how-to-construct-a-multi-factor-commodity-portfolio","text":"Explain portfolio theory in the context of multiple factors Show how to build an optimal commodity portfolio Static (equal-weight or risk-parity) vs. optimized weighting Implementation challenges (part 5. of the paper, multifactor commodity portfolios)","title":"How to Construct a Multi-Factor Commodity Portfolio?"},{"location":"old/portfolio_construction/#equally-weighted-commodity-factor-portfolio","text":"The equally weighted commodity factor portfolio investes proportionally in each of the three commodity factors and since it does not use estimates of return or risk, is by definition free of estimation risk. EW will be mean-variance optimal when commodity factor expected returns, variances and correlations are the same.","title":"Equally-Weighted Commodity Factor Portfolio"},{"location":"old/portfolio_construction/#the-inverse-variance-portfolio","text":"The inverse variance (IV) portfolio rule depends only on variance and assumes that the correlation between the factors is zero. IV weights are calculated according to the following equation: $$ w_{i,t} = \\frac{1/\\sigma_{i,t}^2}{\\sum_{j=1}^{N} 1/\\sigma_{j,t}^2} $$ where \\(\\sigma_{i,t}^2\\) is the estimated variance of commodity \\(i\\).","title":"The Inverse Variance Portfolio"},{"location":"old/portfolio_construction/#minvar-rule","text":"MinVar rule is the short sale-constrained minimum variance portfolio of commodity factors.","title":"MinVar Rule"},{"location":"old/predictability/","text":"Dynamic Factor Strategies and Predictability An investor can capture the average premia offered by commodity factors through a passive investment strategy in factor portfolios. The passive investment strategy rebalances periodically the commodity factor portfolios in accordance with the chose portfolio construction methodology and will be optimal if return and risk are constant or unpredictable. Successful commodity timing strategies on the other hand, requires ability to forecast commodity returns, risks or both. Evidence on the predictability of commodity returns is controversial. Following previous research on the predictability of commodity returns we consider: macroeconomic predictor variables (T-bill 1 month, yield spread, default spread, unemployment rate, money supply growth, industrial production growth and the Killian real economic activity index) -commodity-specific predictor variables (aggregate commodity basis, commodity market interest, the growth in \"commodity currency\" exchange rates and the 1-month lagged commodity return) factor exposure spreads defined as the difference in the factor exposure of the high and low commodity factor portfolios We employ four forecasting models: the historical average the forecast combination (pooled average) the diffusion index model the multiple regression model Forecasting Variables Macroeconomic Variables Commodity-Specific Predictor Variables Factor Exposure Spreads Forecasting Models Historical Average Forecast Combination Model The Diffusion Index Model The Multiple Regression Model Performance of Commodity Timing Factor Strategies In this section we evaluate the performance of a dynamic strategy that adjusts the weight allocated to a commodity factor premium using the forecass of risk and return.","title":"Dynamic Factor Strategies and Predictability"},{"location":"old/predictability/#dynamic-factor-strategies-and-predictability","text":"An investor can capture the average premia offered by commodity factors through a passive investment strategy in factor portfolios. The passive investment strategy rebalances periodically the commodity factor portfolios in accordance with the chose portfolio construction methodology and will be optimal if return and risk are constant or unpredictable. Successful commodity timing strategies on the other hand, requires ability to forecast commodity returns, risks or both. Evidence on the predictability of commodity returns is controversial. Following previous research on the predictability of commodity returns we consider: macroeconomic predictor variables (T-bill 1 month, yield spread, default spread, unemployment rate, money supply growth, industrial production growth and the Killian real economic activity index) -commodity-specific predictor variables (aggregate commodity basis, commodity market interest, the growth in \"commodity currency\" exchange rates and the 1-month lagged commodity return) factor exposure spreads defined as the difference in the factor exposure of the high and low commodity factor portfolios We employ four forecasting models: the historical average the forecast combination (pooled average) the diffusion index model the multiple regression model","title":"Dynamic Factor Strategies and Predictability"},{"location":"old/predictability/#forecasting-variables","text":"","title":"Forecasting Variables"},{"location":"old/predictability/#macroeconomic-variables","text":"","title":"Macroeconomic Variables"},{"location":"old/predictability/#commodity-specific-predictor-variables","text":"","title":"Commodity-Specific Predictor Variables"},{"location":"old/predictability/#factor-exposure-spreads","text":"","title":"Factor Exposure Spreads"},{"location":"old/predictability/#forecasting-models","text":"","title":"Forecasting Models"},{"location":"old/predictability/#historical-average","text":"","title":"Historical Average"},{"location":"old/predictability/#forecast-combination-model","text":"","title":"Forecast Combination Model"},{"location":"old/predictability/#the-diffusion-index-model","text":"","title":"The Diffusion Index Model"},{"location":"old/predictability/#the-multiple-regression-model","text":"","title":"The Multiple Regression Model"},{"location":"old/predictability/#performance-of-commodity-timing-factor-strategies","text":"In this section we evaluate the performance of a dynamic strategy that adjusts the weight allocated to a commodity factor premium using the forecass of risk and return.","title":"Performance of Commodity Timing Factor Strategies"}]}